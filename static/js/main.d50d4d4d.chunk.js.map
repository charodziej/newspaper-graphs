{"version":3,"sources":["components/Paper.js","components/Graph.js","components/Inputs.js","components/App.js","serviceWorker.js","index.js"],"names":["styled","Paper","theme","margin","spacing","padding","Graph","dataPoints","newspaperData","hideInput","data","map","index","name","val","reduce","prev","curr","console","log","colors","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","style","width","height","top","right","left","bottom","strokeDasharray","dataKey","key","fill","stackId","Inputs","setData","addNewspaper","newspaper","setNewspaper","addDataPoint","setHideInput","useState","newNewspaper","setNewNewspaper","newDataPoint","setNewDataPoint","display","Typography","variant","marginBottom","Button","color","onClick","Divider","marginTop","TextField","label","value","onChange","evt","target","length","FormControl","minWidth","InputLabel","Select","MenuItem","point","Fragment","App","setDataPoints","setNewspaperData","handleEscKey","keyCode","useEffect","document","addEventListener","removeEventListener","CssBaseline","prevNews","pointIndex","news","prevData","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d50d4d4d.chunk.js","sourcesContent":["import { styled } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nexport default styled(Paper)(({ theme }) => ({\n    margin: theme.spacing(2),\n    padding: theme.spacing(2)\n}))","import React from 'react'\nimport Paper from './Paper'\nimport {\n    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n} from 'recharts';\nimport { red, pink, purple, deepPurple, indigo, blue, lightBlue, cyan, teal, green, lightGreen, lime, amber, yellow, orange } from '@material-ui/core/colors'\n\nexport default function Graph({ dataPoints, newspaperData, hideInput }) {\n    const data = dataPoints.map((data, index) => ({\n        name: data,\n        ...((newspaperData).map((val) => ({ [val.name]: val.data[index] || 0 }))).reduce((prev, curr) => ({ ...prev, ...curr }), { })\n    }))\n\n    console.log(data)\n    const colors = [ red[500], pink[500], purple[500], deepPurple[500], indigo[500], blue[500], lightBlue[500], cyan[500], teal[500], green[500], lightGreen[500], lime[500], yellow[500], amber[500], orange[500] ]\n\n    return (\n        <Paper \n            style={{\n                width: (hideInput) ? \"100%\" : \"50%\",\n                height: \"calc(100vh - 50px)\"\n            }}\n        >\n            <ResponsiveContainer height='100%' width='100%'>\n                <BarChart\n                    data={data}\n                    margin={{\n                        top: 20, right: 30, left: 20, bottom: 5,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    {(newspaperData).map((val, index) => (\n                        <Bar key={val.name} dataKey={val.name} fill={colors[index]} stackId=\"a\" />\n                    ))}\n                </BarChart>\n            </ResponsiveContainer>\n        </Paper>\n    )\n}\n","import React, { useState } from 'react'\nimport Paper from './Paper'\nimport Typography from '@material-ui/core/Typography'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport { Divider } from '@material-ui/core'\n\nexport default function Inputs({ newspaperData, setData, addNewspaper, newspaper, setNewspaper, dataPoints, addDataPoint, setHideInput }) {\n    const [ newNewspaper, setNewNewspaper ] = useState(\"\")\n    const [ newDataPoint, setNewDataPoint ] = useState(\"\")\n\n    return (\n        <Paper \n            style={{\n                width: \"50vw\"\n            }}\n        >\n            <div style={{ display: \"flex\" }}>\n                <Typography \n                    variant=\"h4\"\n                    style={{\n                        marginBottom: 12,\n                        width: \"100%\"\n                    }}\n                >\n                    Newspaper graphs\n                </Typography>\n                <Button \n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={() => setHideInput(true)} \n                >\n                    Hide\n                </Button>\n            </div>\n            <Divider />\n            <div\n                style={{\n                    marginTop: 12,\n                    marginBottom: 12,\n                }}\n            >\n                <TextField \n                    label=\"Data point name\" \n                    value={newDataPoint}\n                    onChange={(evt) => setNewDataPoint(evt.target.value)}\n                />\n                <Button \n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={() => { addDataPoint(newDataPoint); setNewDataPoint(\"\") }} \n                >\n                    Add data point\n                </Button>\n            </div>\n\n            <Divider />\n            <div\n                style={{\n                    marginTop: 12,\n                    marginBottom: 12,\n                }}\n            >\n                <TextField \n                    label=\"Newspaper name\" \n                    value={newNewspaper}\n                    onChange={(evt) => setNewNewspaper(evt.target.value)}\n                />\n                <Button \n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={() => { addNewspaper(newNewspaper); setNewNewspaper(\"\") }}\n                >\n                    Add newspaper\n                </Button>\n            </div>\n            {(newspaperData.length > 0) && \n                <>\n                    <Divider />\n                    <FormControl\n                        style={{\n                            minWidth: 200,\n                            marginTop: 12,\n                        }}\n                    >\n                        <InputLabel>Select a newspaper</InputLabel>\n                        <Select\n                            value={newspaper}\n                            onChange={(evt) => setNewspaper(evt.target.value)}\n                        >\n                            {(newspaperData).map(({ name }, index) => (\n                                <MenuItem key={name} value={index}>{name}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </>\n            }\n            <div\n                style={{\n                    display: \"block\"\n                }}\n            >\n                {(newspaper !== null) && \n                    dataPoints.map((point, index) => (\n                        <React.Fragment key={point}>\n                            <TextField \n                                style={{\n                                    marginTop: 8,\n                                    marginBottom: 8,\n                                }}\n                                label={point}\n                                value={newspaperData[newspaper].data[index] || \"\"}\n                                onChange={(evt) => setData(index, evt.target.value)}\n                            />\n                            <br />\n                        </React.Fragment>\n                    ))\n                }\n            </div>\n        </Paper>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport Graph from './Graph'\nimport Inputs from './Inputs'\nimport { CssBaseline } from '@material-ui/core'\n\nfunction App() {\n    const [ dataPoints, setDataPoints ] = useState([ ])\n    const [ newspaperData, setNewspaperData ] = useState([ ])\n    const [ newspaper, setNewspaper ] = useState(null)\n    const [ hideInput, setHideInput ] = useState(false)\n\n    const addDataPoint = (val) => {\n        setDataPoints((prevData) => ([ \n            ...prevData, \n            val\n        ]))\n    }\n\n    const addNewspaper = (val) => {\n        if (newspaperData.length === 0) {\n            setNewspaper(0)\n        }\n        setNewspaperData((prevNews) => ([ \n            ...prevNews, \n            {\n                name: val,\n                data: ((dataPoints).map((val, index) => ({ [index]: 0 }))).reduce((prev, curr) => ({ ...prev, ...curr }), { })\n            }\n        ]))\n    }\n\n    const setData = (pointIndex, val) => {\n        setNewspaperData(newspaperData.map((news, index) => (\n            ((index === newspaper) ? ({ name: news.name, data: { ...news.data, [pointIndex]: val } }) : (news))\n        )))\n    }\n\n    const handleEscKey = (evt) => {\n        if(evt.keyCode === 27){\n            setHideInput(false)\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleEscKey, false)\n        return () => {\n            document.removeEventListener(\"keydown\", handleEscKey, false)\n        }\n    }, [ ])\n\n    return (\n        <div \n            style={{\n                display: \"flex\"\n            }}\n        >\n            <CssBaseline />\n            {(!hideInput) && <Inputs \n                newspaperData={newspaperData}\n                addNewspaper={addNewspaper}\n                newspaper={newspaper}\n                setNewspaper={setNewspaper}\n                setData={setData}\n                addDataPoint={addDataPoint}\n                dataPoints={dataPoints}\n                setHideInput={setHideInput}\n            />}\n            <Graph \n                dataPoints={dataPoints}\n                newspaperData={newspaperData}\n                hideInput={hideInput}\n            />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}